
name: Validate migrations
on:
  workflow_call:
    secrets:
      gh_token:
        required: true
    inputs:
      gh_actor:
        description: Repository id for the container
        type: string
        required: true
      image_publication_repository:
        description: Repository id for the container
        type: string
        required: true
      migrations_directory:
        description: Directory where SQL files are located
        type: string
        required: true
      flyway_config_file:
        description: sss
        type: string
        default: ""
      branch:
        description: Code repository branch
        type: string
        required: true
      migration_timestamp_version:
        description: Indicate if the migration version is usign the timestamp format
        type: boolean
        default: false
      image_publication_registry:
        description: Registry to publish the container
        type: string
        default: ghcr.io/domix
      pg_container_image:
        description: Postgres container image to be used to test the db migrations
        type: string
        default: postgres
      pg_container_tag:
        description: Postgres container tag to be used to test the db migrations
        type: string
        default: 10.17
      flyway_container_image:
        description: Flyway container image to be used to run the db migrations
        type: string
        default: flyway/flyway
      flyway_container_user:
        description: Container user
        type: string
        default: flyway
      flyway_container_sql_directory:
        description: dd
        type: string
        default: /flyway/sql
      flyway_container_config_file:
        description: sss
        type: string
        default: /flyway/conf/flyway.conf
      flyway_container_tag:
        description: Flyway container tag to be used to run the db migrations
        type: string
        default: 8.5.13
      flyway_validate_migration_naming:
        description: Whether to ignore migration files whose names do not match the naming conventions.
        type: boolean
        default: true
      pg_user:
        description: The Postgres user
        type: string
        default: postgres
      pg_password:
        description: The Postgres user password
        type: string
        default: secret
      pg_database:
        description: The Postgres database name
        type: string
        default: postgres
      db_migration_internal_work_directory:
        description: Internal work directory
        type: string
        default: .db-migration-internal-work-directory

jobs:
  build-container:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: ${{ inputs.pg_container_image }}:${{ inputs.pg_container_tag }}
        env:
          POSTGRES_USER: ${{ inputs.pg_user }}
          POSTGRES_PASSWORD: ${{ inputs.pg_password }}
          POSTGRES_DB: ${{ inputs.pg_database }}
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - name: Check out repository code
        uses: actions/checkout@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ inputs.image_publication_registry }}
          username: ${{ inputs.gh_actor }}
          password: ${{ secrets.gh_token }}

      - name: Apply Flyway migrations
        run: docker run --rm --net=host -v `pwd`/${{ inputs.migrations_directory }}:/flyway/sql ${{ inputs.flyway_container_image }}:${{ inputs.flyway_container_tag }} -url=jdbc:postgresql://localhost:5432/${{ inputs.pg_database }} -user=${{ inputs.pg_user }} -password=${{ inputs.pg_password }} -validateMigrationNaming="${{ inputs.flyway_validate_migration_naming }}" migrate

      - name: Validate Flyway migrations
        run: docker run --rm --net=host -v `pwd`/${{ inputs.migrations_directory }}:/flyway/sql ${{ inputs.flyway_container_image }}:${{ inputs.flyway_container_tag }} -url=jdbc:postgresql://localhost:5432/${{ inputs.pg_database }} -user=${{ inputs.pg_user }} -password=${{ inputs.pg_password }} -validateMigrationNaming="${{ inputs.flyway_validate_migration_naming }}" validate

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v3.4.1
        with:
          images: ${{ inputs.image_publication_registry }}/${{ inputs.image_publication_repository }}
          tags: |
              type=sha
              type=ref,event=pr
              type=edge,branch=${{ inputs.branch }}

      - name: Prepare the Dockerfile
        run: |
          mkdir -p `pwd`/${{ inputs.db_migration_internal_work_directory }}
          [[ -z ${{ inputs.flyway_config_file }} ]] && export FLYWAY_CONFIG="" || export FLYWAY_CONFIG="ADD ${{ inputs.flyway_container_config_file }} ${{ inputs.flyway_config_file }}"
          cat <<EOF > ${{ inputs.db_migration_internal_work_directory }}/Dockerfile
          ARG FW_IMAGE=flyway/flyway:8.5.13
          FROM \$FW_IMAGE

          USER ${{ inputs.flyway_container_user }}

          ARG DB_MIGRATION_DIR=./migrations

          \$FLYWAY_CONFIG
          

          ADD \$DB_MIGRATION_DIR ${{ inputs.flyway_container_sql_directory }}
          EOF
          cat ${{ inputs.db_migration_internal_work_directory }}/Dockerfile

      - name: Build and Push Container Image
        id: build-image
        uses: docker/build-push-action@v3
        with:
          build-args: |
             FW_IMAGE=${{ inputs.flyway_container_image }}:${{ inputs.flyway_container_tag }}
             DB_MIGRATION_DIR=${{ inputs.migrations_directory }}
          context: .
          cache-to: type=gha,mode=max
          file: ${{ inputs.db_migration_internal_work_directory }}/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
